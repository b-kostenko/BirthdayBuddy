services:
  postgres:
    image: postgres:latest
    container_name: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  celery-worker:
    image: celery:latest
    container_name: celery-worker
    volumes:
      - .:/app
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.infrastructure.celery.celery_app.celery_app", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
      - redis
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    command: celery -A app.infrastructure.celery.celery_app.celery_app worker --loglevel=info

  celery-beat:
    image: celery:latest
    container_name: celery-beat
    volumes:
      - .:/app
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.infrastructure.celery.celery_app.celery_app", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
      - redis
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    command: celery -A app.infrastructure.celery.celery_app.celery_app beat --loglevel=info

volumes:
    postgres_data:
        name: postgres_data